+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
||			PROJECT V: SYSSTATD WEB SERVER             ||
||        ----------------------------------           ||
||		Group: 369                                      ||
||		Jonathan Lester [jonal90@vt.edu]  - Kafura     ||
||		Dirk Hortensius [dirker27@vt.edu] - McQuain    ||
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Compilation:
	make clean all

Execution:
	./sysstatd (-p [port] | -r [relay:port] | -R [Files Path])

================== DESIGN ====================

Multi-Client Support:
	To enable Multi-Client connectivity, a thread is dispatched for every
	client connection detected. There is a 1-1 relation between the number
	of threads and connections that are active. (Drawback: this limits us
	to as many connections as we have threads, and that's optimized at 16).

	To avoid launching multiple threads for the same connection, we maintain
	a list of active connections to be consulted when detecting a new 
	connection. If the connection already exists in our list, we simply ignore
	it, as there is already a thread dispatched to read it.

HTTP Request Handling:
	HTTP Requests are converted to our internally used object via parsing.
	They are then processed according to their interpreted intentions.

HTTP Response Dispatch:
	HTTP Responses are generated by the respective URI being run. They are
	then dispatched (written to the client's socket) after the completion
	of their execution. In cases where files are being served, these responses
	are dispatched straight to the client's socket from there in order to
	exploit buffered writer helper functions. These are to avoid cases where
	the file's size exceeds our data buffers.

URI Interpretation:
	URI arguments to the GET argument are first checked to see if they are a
	supported command. If not, then they are assumed to be file names and
	are attempted to be served as such. The /files URI is just more explicit.

	ie: if a URI is not:
		(/loadavg | /meminfo | /runloop | /allocanon | /freeanon | /files)
	Then assume it's a filename and serve it thusly

================= MISC ========================

While no code copied from this source, we did use an outside source for
reference on initial implementation. We were careful not to steal his design
or implementation details. Any similiarities are merely coincidental.

Source: https://github.com/rishair/petit-server
